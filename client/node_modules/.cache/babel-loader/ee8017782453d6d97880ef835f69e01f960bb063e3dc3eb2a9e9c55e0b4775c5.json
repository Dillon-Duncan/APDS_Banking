{"ast":null,"code":"// Name: Letters, spaces, and basic accents\nexport const NAME_REGEX = /^[a-zA-ZÀ-ÿ\\s'-]{2,50}$/;\n\n// Account Number: 10-20 alphanumeric\nexport const ACCOUNT_REGEX = /^[A-Z0-9]{10,20}$/i;\n\n// Amount: Positive decimals with optional currency symbol\nexport const AMOUNT_REGEX = /^[£€$]?\\d+(\\.\\d{1,2})?$/;\n\n// SWIFT/BIC Code: Standard format\nexport const SWIFT_REGEX = /^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$/;\n\n// Bank Address: Alphanumeric with basic punctuation\nexport const ADDRESS_REGEX = /^[a-zA-Z0-9\\s.,'-]{5,100}$/;\n\n// Transaction Reference: Alphanumeric and hyphens\nexport const REFERENCE_REGEX = /^[A-Z0-9-]{5,20}$/i;\n\n// Added password validation\nexport const PASSWORD_REGEX = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*#?&]{8,}$/;\n\n// Enhanced validation function\nexport const validateInput = (value, regex, maxLength = 100) => {\n  const cleaned = typeof value === 'string' ? value.trim() : value.toString();\n  return cleaned.length <= maxLength && regex.test(cleaned);\n};","map":{"version":3,"names":["NAME_REGEX","ACCOUNT_REGEX","AMOUNT_REGEX","SWIFT_REGEX","ADDRESS_REGEX","REFERENCE_REGEX","PASSWORD_REGEX","validateInput","value","regex","maxLength","cleaned","trim","toString","length","test"],"sources":["C:/Users/mrdun/Desktop/APDS_Banking/client/src/utils/validations.js"],"sourcesContent":["// Name: Letters, spaces, and basic accents\r\nexport const NAME_REGEX = /^[a-zA-ZÀ-ÿ\\s'-]{2,50}$/;\r\n\r\n// Account Number: 10-20 alphanumeric\r\nexport const ACCOUNT_REGEX = /^[A-Z0-9]{10,20}$/i;\r\n\r\n// Amount: Positive decimals with optional currency symbol\r\nexport const AMOUNT_REGEX = /^[£€$]?\\d+(\\.\\d{1,2})?$/;\r\n\r\n// SWIFT/BIC Code: Standard format\r\nexport const SWIFT_REGEX = /^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$/;\r\n\r\n// Bank Address: Alphanumeric with basic punctuation\r\nexport const ADDRESS_REGEX = /^[a-zA-Z0-9\\s.,'-]{5,100}$/;\r\n\r\n// Transaction Reference: Alphanumeric and hyphens\r\nexport const REFERENCE_REGEX = /^[A-Z0-9-]{5,20}$/i;\r\n\r\n// Added password validation\r\nexport const PASSWORD_REGEX = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*#?&]{8,}$/;\r\n\r\n// Enhanced validation function\r\nexport const validateInput = (value, regex, maxLength = 100) => {\r\n  const cleaned = typeof value === 'string' ? value.trim() : value.toString();\r\n  return cleaned.length <= maxLength && regex.test(cleaned);\r\n}; "],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAG,yBAAyB;;AAEnD;AACA,OAAO,MAAMC,aAAa,GAAG,oBAAoB;;AAEjD;AACA,OAAO,MAAMC,YAAY,GAAG,yBAAyB;;AAErD;AACA,OAAO,MAAMC,WAAW,GAAG,qCAAqC;;AAEhE;AACA,OAAO,MAAMC,aAAa,GAAG,4BAA4B;;AAEzD;AACA,OAAO,MAAMC,eAAe,GAAG,oBAAoB;;AAEnD;AACA,OAAO,MAAMC,cAAc,GAAG,gDAAgD;;AAE9E;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAEC,SAAS,GAAG,GAAG,KAAK;EAC9D,MAAMC,OAAO,GAAG,OAAOH,KAAK,KAAK,QAAQ,GAAGA,KAAK,CAACI,IAAI,CAAC,CAAC,GAAGJ,KAAK,CAACK,QAAQ,CAAC,CAAC;EAC3E,OAAOF,OAAO,CAACG,MAAM,IAAIJ,SAAS,IAAID,KAAK,CAACM,IAAI,CAACJ,OAAO,CAAC;AAC3D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}